<?php

/**
 * @file
 * Install, update and uninstall functions for the oe_multilingual module.
 */

declare(strict_types=1);

use Drupal\Core\Language\LanguageInterface;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationSelected;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
use Drupal\oe_multilingual\Plugin\LanguageNegotiation\LanguageNegotiationAdmin;

/**
 * Implements hook_install().
 */
function oe_multilingual_install($is_syncing) {
  if ($is_syncing) {
    // If config is syncing, we do nothing here.
    return;
  }

  // Set EU category for the English language.
  \Drupal::entityTypeManager()
    ->getStorage('configurable_language')
    ->load('en')
    ->setThirdPartySetting('oe_multilingual', 'category', 'eu')
    ->save();

  // Set up the weight of the English language.
  \Drupal::configFactory()
    ->getEditable('language.entity.en')
    ->set('weight', 7)
    ->save();

  // Disable remote translations downloading from Drupal localisation service.
  // Also make sure that English language is translatable.
  \Drupal::configFactory()
    ->getEditable('locale.settings')
    ->set('translation.import_enabled', FALSE)
    ->save();

  // Make sure that English language prefix is set to "en".
  \Drupal::configFactory()
    ->getEditable('language.negotiation')
    ->set('url.prefixes.en', 'en')
    ->save();

  // Make sure that Portuguese language prefix is set to "pt".
  \Drupal::configFactory()
    ->getEditable('language.negotiation')
    ->set('url.prefixes.pt-pt', 'pt')
    ->save();

  /** @var \Drupal\oe_multilingual\LanguageNegotiationSetterInterface $setter */
  $setter = \Drupal::service('oe_multilingual.language_negotiation_setter');

  // Set default language negotiation methods.
  $setter->enableNegotiationMethods([
    LanguageInterface::TYPE_INTERFACE,
    LanguageInterface::TYPE_CONTENT,
  ]);

  // For interface negotiation make sure administrative pages are in English.
  $setter->setInterfaceSettings([
    LanguageNegotiationAdmin::METHOD_ID => -20,
    LanguageNegotiationUrl::METHOD_ID => -19,
    LanguageNegotiationSelected::METHOD_ID => 20,
  ]);

  // For content negotiation make sure that content respects URL language.
  $setter->setContentSettings([
    LanguageNegotiationUrl::METHOD_ID => -19,
    LanguageNegotiationSelected::METHOD_ID => 20,
  ]);

  \Drupal::messenger()->addMessage('Please be aware that oe_multilingual makes changes to the following configurations: Language, Locale, Administration language negotiation.');
}

/**
 * Implements hook_uninstall().
 */
function oe_multilingual_uninstall() {
  // Unset the LanguageNegotiationAdmin plugin from the interface negotiation.
  // This is needed because the plugin is defined by this module.
  $names = [
    'negotiation.' . LanguageInterface::TYPE_INTERFACE . '.enabled',
    'negotiation.' . LanguageInterface::TYPE_INTERFACE . '.method_weights',
  ];

  $config = \Drupal::configFactory()->getEditable('language.types');
  foreach ($names as $name) {
    $settings = $config->get($name);
    if (isset($settings[LanguageNegotiationAdmin::METHOD_ID])) {
      unset($settings[LanguageNegotiationAdmin::METHOD_ID]);
    }
    $config->set($name, $settings);
  }

  $config->save();
}
